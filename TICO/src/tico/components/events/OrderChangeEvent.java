/*
 * File: OrderChangeEvent.java
 * 		This file is part of Tico, an application to create and	perform
 * 		interactive communication boards to be used by people with
 * 		severe motor disabilities.
 * 
 * Authors: Pablo Muñoz
 * 
 * Date: Oct 5, 2006
 * 
 * Company: Universidad de Zaragoza, CPS, DIIS
 * 
 * License:
 * 		This program is free software: you can redistribute it and/or 
 * 		modify it under the terms of the GNU General Public License 
 * 		as published by the Free Software Foundation, either version 3
 * 		of the License, or (at your option) any later version.
 * 
 * 		This program is distributed in the hope that it will be useful,
 * 		but WITHOUT ANY WARRANTY; without even the implied warranty of
 * 		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * 		GNU General Public License for more details.
 * 
 * 		You should have received a copy of the GNU General Public License
 *     	along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 */

package tico.components.events;

import java.util.EventObject;

/**
 * A semantic event which indicates that a change of order action occured. This
 * event is generated by an ordered list component (such as a
 * <code>TOrderList</code>) when the change of order occurs. The event is passed
 * to every every <code>OrderChangeListener</code> object that registered to
 * receive such events using the component's <code>addOrderChangeListener</code>
 * method.
 * 
 * The object that implements the <code>OrderChangeListener</code> interface gets
 * this <code>OrderChangeEvent</code> when the event occurs.
 * 
 * @author Pablo Muñoz
 * @version 1.0 Nov 20, 2006
 */
public class OrderChangeEvent extends EventObject {
	// The position changed object
	private Object changedObject;
	// the changed object initial position
	private int initialPosition;
	// the changed object final position
	private int finalPosition;
	
	/**
	 * Constructs an <code>OrderChangeEvent</code> object.
	 * 
	 * @param source The object that originated the event
	 * @param changedObject The position changed <code>object</code>
	 * @param initialPosition The changed object <code>initialPosition</code>
	 * @param finalPosition The changed object <code>finalPosition</code>
	 */ 	
	public OrderChangeEvent(Object source, Object changedObject, int initialPosition,
			int finalPosition) {
		super(source);
		
		this.changedObject = changedObject;
		this.initialPosition = initialPosition;
		this.finalPosition = finalPosition;
	}

	/**
	 * Returns the position changed <code>object</code>.
	 * 
	 * @return The position changed <code>object</code>
	 */
	public Object getChangedObject() {
		return changedObject;
	}

	/**
	 * Returns the changed object <code>initialPosition</code>.
	 * 
	 * @return The changed object <code>initialPosition</code>
	 */
	public int getInitialPosition() {
		return initialPosition;
	}
	
	/**
	 * Returns the changed object <code>finalPosition</code>.
	 * 
	 * @return The changed object <code>finalPosition</code>
	 */
	public int getFinalPosition() {
		return finalPosition;
	}
}
